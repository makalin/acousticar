version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: acousticar-backend
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - DATABASE_URL=sqlite:///./acousticar.db
      - SAMPLE_RATE=44100
      - BUFFER_SIZE=1024
      - MAX_AUDIO_DURATION=300
      - ANALYSIS_WINDOW_SIZE=4096
      - ANALYSIS_HOP_LENGTH=1024
      - FFT_SIZE=4096
      - EQ_BANDS=31
      - MAX_EQ_GAIN=12.0
      - MIN_EQ_GAIN=-12.0
      - HRTF_ENABLED=true
      - CROSSTALK_COMPENSATION=true
      - SPATIAL_ENHANCEMENT=true
      - WEBSOCKET_PING_INTERVAL=30
      - WEBSOCKET_PING_TIMEOUT=10
      - MAX_WEBSOCKET_CONNECTIONS=100
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
      - CORS_ALLOW_CREDENTIALS=true
      - SECRET_KEY=your-secret-key-change-in-production
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ALGORITHM=HS256
      - MAX_FILE_SIZE=52428800
      - ALLOWED_AUDIO_FORMATS=wav,mp3,flac,aac,ogg,m4a
      - UPLOAD_DIRECTORY=uploads
      - LOG_LEVEL=INFO
      - MAX_CONCURRENT_ANALYSES=10
      - ANALYSIS_TIMEOUT=30
      - CACHE_TTL=3600
      - MODEL_DIRECTORY=models
      - MODEL_CACHE_SIZE=100
      - MODEL_LOADING_TIMEOUT=60
      - AUDIO_CHANNELS=2
      - AUDIO_FORMAT=int16
      - REAL_TIME_ENABLED=true
      - REAL_TIME_BUFFER_SIZE=1024
      - REAL_TIME_LATENCY=0.1
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - HEALTH_CHECK_INTERVAL=30
      - RELOAD=false
      - WORKERS=1
    volumes:
      - ./backend/data:/app/data
      - ./backend/uploads:/app/uploads
      - ./backend/models:/app/models
      - ./backend/logs:/app/logs
    networks:
      - acousticar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: acousticar-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - GENERATE_SOURCEMAP=false
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    networks:
      - acousticar-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: acousticar-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - acousticar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: acousticar-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - acousticar-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: acousticar-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - acousticar-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: acousticar-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - acousticar-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  acousticar-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
